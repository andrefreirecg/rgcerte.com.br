"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
var _i18n = require("@wordpress/i18n");
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _warning = _interopRequireDefault(require("../warning"));
var _unsupportedBlockDetails = _interopRequireDefault(require("../unsupported-block-details"));
var _store = require("../../store");
var _constants = require("./constants");
var _useUnsupportedBlockEditor = _interopRequireDefault(require("../use-unsupported-block-editor"));
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const WarningMaxDepthExceeded = ({
  clientId
}) => {
  const [showDetails, setShowDetails] = (0, _element.useState)(false);
  const {
    isSelected,
    innerBlocks
  } = (0, _data.useSelect)(select => {
    const {
      getBlock,
      isBlockSelected
    } = select(_store.store);
    return {
      innerBlocks: getBlock(clientId)?.innerBlocks || [],
      isSelected: isBlockSelected(clientId)
    };
  }, [clientId]);
  const {
    replaceBlocks
  } = (0, _data.useDispatch)(_store.store);
  const {
    isUnsupportedBlockEditorSupported,
    canEnableUnsupportedBlockEditor
  } = (0, _useUnsupportedBlockEditor.default)(clientId);
  const onUngroup = () => {
    if (!innerBlocks.length) {
      return;
    }
    replaceBlocks(clientId, innerBlocks);
  };
  let description;
  // When UBE can't be used, the description mentions using the web browser to edit the block.
  if (!isUnsupportedBlockEditorSupported && !canEnableUnsupportedBlockEditor) {
    /* translators: Warning related to having blocks deeply nested. %d: The deepest nesting level. */
    const descriptionFormat = (0, _i18n.__)('Blocks nested deeper than %d levels may not render properly in the mobile editor. For this reason, we recommend flattening the content by ungrouping the block or editing the block using your web browser.');
    description = (0, _i18n.sprintf)(descriptionFormat, _constants.MAX_NESTING_DEPTH);
  }
  // Otherwise, the description mentions using the web editor (i.e. UBE).
  else {
    /* translators: Warning related to having blocks deeply nested. %d: The deepest nesting level. */
    const descriptionFormat = (0, _i18n.__)('Blocks nested deeper than %d levels may not render properly in the mobile editor. For this reason, we recommend flattening the content by ungrouping the block or editing the block using the web editor.');
    description = (0, _i18n.sprintf)(descriptionFormat, _constants.MAX_NESTING_DEPTH);
  }
  return (0, _react.createElement)(_reactNative.TouchableWithoutFeedback, {
    disabled: !isSelected,
    accessibilityLabel: (0, _i18n.__)('Warning message'),
    accessibilityRole: 'button',
    accessibilityHint: (0, _i18n.__)('Tap here to show more details.'),
    onPress: () => setShowDetails(true)
  }, (0, _react.createElement)(_reactNative.View, null, (0, _react.createElement)(_warning.default, {
    message: (0, _i18n.__)('Block cannot be rendered because it is deeply nested. Tap here for more details.')
  }), (0, _react.createElement)(_unsupportedBlockDetails.default, {
    clientId: clientId,
    showSheet: showDetails,
    onCloseSheet: () => setShowDetails(false),
    title: (0, _i18n.__)('Deeply nested block'),
    description: description,
    customActions: [{
      label: (0, _i18n.__)('Ungroup block'),
      onPress: onUngroup
    }]
  })));
};
var _default = WarningMaxDepthExceeded;
exports.default = _default;
//# sourceMappingURL=warning-max-depth-exceeded.native.js.map