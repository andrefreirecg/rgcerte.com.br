{"version":3,"names":["_element","require","_compose","_blocks","_richText","_url","_utils","_splitValue","_pasting","usePasteHandler","props","propsRef","useRef","current","useRefEffect","element","_onPaste","event","isSelected","disableFormats","onChange","value","formatTypes","tagName","onReplace","onSplit","__unstableEmbedURLOnPaste","preserveWhiteSpace","pastePlainText","plainText","html","files","getPasteEventData","preventDefault","window","console","log","insert","transformed","reduce","accumlator","__unstablePasteRule","isInternal","clipboardData","getData","pastedValue","create","addActiveFormats","activeFormats","text","length","fromTransforms","getBlockTransforms","blocks","accumulator","file","transformation","findTransform","transform","type","isMatch","push","flat","isEmpty","splitValue","pastedBlocks","mode","isURL","trim","content","pasteHandler","HTML","valueToInsert","addEventListener","removeEventListener"],"sources":["@wordpress/block-editor/src/components/rich-text/use-paste-handler.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRef } from '@wordpress/element';\nimport { useRefEffect } from '@wordpress/compose';\nimport {\n\tpasteHandler,\n\tfindTransform,\n\tgetBlockTransforms,\n} from '@wordpress/blocks';\nimport { isEmpty, insert, create } from '@wordpress/rich-text';\nimport { isURL } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport { addActiveFormats } from './utils';\nimport { splitValue } from './split-value';\nimport { getPasteEventData } from '../../utils/pasting';\n\n/** @typedef {import('@wordpress/rich-text').RichTextValue} RichTextValue */\n\nexport function usePasteHandler( props ) {\n\tconst propsRef = useRef( props );\n\tpropsRef.current = props;\n\treturn useRefEffect( ( element ) => {\n\t\tfunction _onPaste( event ) {\n\t\t\tconst {\n\t\t\t\tisSelected,\n\t\t\t\tdisableFormats,\n\t\t\t\tonChange,\n\t\t\t\tvalue,\n\t\t\t\tformatTypes,\n\t\t\t\ttagName,\n\t\t\t\tonReplace,\n\t\t\t\tonSplit,\n\t\t\t\t__unstableEmbedURLOnPaste,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t\tpastePlainText,\n\t\t\t} = propsRef.current;\n\n\t\t\tif ( ! isSelected ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { plainText, html, files } = getPasteEventData( event );\n\n\t\t\tevent.preventDefault();\n\n\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\twindow.console.log( 'Received HTML:\\n\\n', html );\n\t\t\twindow.console.log( 'Received plain text:\\n\\n', plainText );\n\n\t\t\tif ( disableFormats ) {\n\t\t\t\tonChange( insert( value, plainText ) );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst transformed = formatTypes.reduce(\n\t\t\t\t( accumlator, { __unstablePasteRule } ) => {\n\t\t\t\t\t// Only allow one transform.\n\t\t\t\t\tif ( __unstablePasteRule && accumlator === value ) {\n\t\t\t\t\t\taccumlator = __unstablePasteRule( value, {\n\t\t\t\t\t\t\thtml,\n\t\t\t\t\t\t\tplainText,\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn accumlator;\n\t\t\t\t},\n\t\t\t\tvalue\n\t\t\t);\n\n\t\t\tif ( transformed !== value ) {\n\t\t\t\tonChange( transformed );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isInternal =\n\t\t\t\tevent.clipboardData.getData( 'rich-text' ) === 'true';\n\n\t\t\t// If the data comes from a rich text instance, we can directly use it\n\t\t\t// without filtering the data. The filters are only meant for externally\n\t\t\t// pasted content and remove inline styles.\n\t\t\tif ( isInternal ) {\n\t\t\t\tconst pastedValue = create( {\n\t\t\t\t\thtml,\n\t\t\t\t\tpreserveWhiteSpace,\n\t\t\t\t} );\n\t\t\t\taddActiveFormats( pastedValue, value.activeFormats );\n\t\t\t\tonChange( insert( value, pastedValue ) );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( pastePlainText ) {\n\t\t\t\tonChange( insert( value, create( { text: plainText } ) ) );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( files?.length ) {\n\t\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\twindow.console.log( 'Received items:\\n\\n', files );\n\n\t\t\t\tconst fromTransforms = getBlockTransforms( 'from' );\n\t\t\t\tconst blocks = files\n\t\t\t\t\t.reduce( ( accumulator, file ) => {\n\t\t\t\t\t\tconst transformation = findTransform(\n\t\t\t\t\t\t\tfromTransforms,\n\t\t\t\t\t\t\t( transform ) =>\n\t\t\t\t\t\t\t\ttransform.type === 'files' &&\n\t\t\t\t\t\t\t\ttransform.isMatch( [ file ] )\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif ( transformation ) {\n\t\t\t\t\t\t\taccumulator.push(\n\t\t\t\t\t\t\t\ttransformation.transform( [ file ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}, [] )\n\t\t\t\t\t.flat();\n\t\t\t\tif ( ! blocks.length ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( onReplace && isEmpty( value ) ) {\n\t\t\t\t\tonReplace( blocks );\n\t\t\t\t} else {\n\t\t\t\t\tsplitValue( {\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tpastedBlocks: blocks,\n\t\t\t\t\t\tonReplace,\n\t\t\t\t\t\tonSplit,\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet mode = onReplace && onSplit ? 'AUTO' : 'INLINE';\n\n\t\t\tif (\n\t\t\t\t__unstableEmbedURLOnPaste &&\n\t\t\t\tisEmpty( value ) &&\n\t\t\t\tisURL( plainText.trim() )\n\t\t\t) {\n\t\t\t\tmode = 'BLOCKS';\n\t\t\t}\n\n\t\t\tconst content = pasteHandler( {\n\t\t\t\tHTML: html,\n\t\t\t\tplainText,\n\t\t\t\tmode,\n\t\t\t\ttagName,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\n\t\t\tif ( typeof content === 'string' ) {\n\t\t\t\tconst valueToInsert = create( { html: content } );\n\t\t\t\taddActiveFormats( valueToInsert, value.activeFormats );\n\t\t\t\tonChange( insert( value, valueToInsert ) );\n\t\t\t} else if ( content.length > 0 ) {\n\t\t\t\tif ( onReplace && isEmpty( value ) ) {\n\t\t\t\t\tonReplace( content, content.length - 1, -1 );\n\t\t\t\t} else {\n\t\t\t\t\tsplitValue( {\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tpastedBlocks: content,\n\t\t\t\t\t\tonReplace,\n\t\t\t\t\t\tonSplit,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\telement.addEventListener( 'paste', _onPaste );\n\t\treturn () => {\n\t\t\telement.removeEventListener( 'paste', _onPaste );\n\t\t};\n\t}, [] );\n}\n"],"mappings":"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"}