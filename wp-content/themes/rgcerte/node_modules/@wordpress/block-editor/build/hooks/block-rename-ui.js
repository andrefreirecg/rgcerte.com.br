"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withBlockRenameControl = void 0;
var _react = require("react");
var _compose = require("@wordpress/compose");
var _hooks = require("@wordpress/hooks");
var _i18n = require("@wordpress/i18n");
var _blocks = require("@wordpress/blocks");
var _components = require("@wordpress/components");
var _element = require("@wordpress/element");
var _a11y = require("@wordpress/a11y");
var _components2 = require("../components");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const emptyString = testString => testString?.trim()?.length === 0;
function RenameModal({
  blockName,
  originalBlockName,
  onClose,
  onSave
}) {
  const [editedBlockName, setEditedBlockName] = (0, _element.useState)(blockName);
  const nameHasChanged = editedBlockName !== blockName;
  const nameIsOriginal = editedBlockName === originalBlockName;
  const nameIsEmpty = emptyString(editedBlockName);
  const isNameValid = nameHasChanged || nameIsOriginal;
  const autoSelectInputText = event => event.target.select();
  const dialogDescription = (0, _compose.useInstanceId)(RenameModal, `block-editor-rename-modal__description`);
  const handleSubmit = () => {
    const message = nameIsOriginal || nameIsEmpty ? (0, _i18n.sprintf)( /* translators: %s: new name/label for the block */
    (0, _i18n.__)('Block name reset to: "%s".'), editedBlockName) : (0, _i18n.sprintf)( /* translators: %s: new name/label for the block */
    (0, _i18n.__)('Block name changed to: "%s".'), editedBlockName);

    // Must be assertive to immediately announce change.
    (0, _a11y.speak)(message, 'assertive');
    onSave(editedBlockName);

    // Immediate close avoids ability to hit save multiple times.
    onClose();
  };
  return (0, _react.createElement)(_components.Modal, {
    title: (0, _i18n.__)('Rename'),
    onRequestClose: onClose,
    overlayClassName: "block-editor-block-rename-modal",
    aria: {
      describedby: dialogDescription
    },
    focusOnMount: "firstContentElement"
  }, (0, _react.createElement)("p", {
    id: dialogDescription
  }, (0, _i18n.__)('Enter a custom name for this block.')), (0, _react.createElement)("form", {
    onSubmit: e => {
      e.preventDefault();
      if (!isNameValid) {
        return;
      }
      handleSubmit();
    }
  }, (0, _react.createElement)(_components.__experimentalVStack, {
    spacing: "3"
  }, (0, _react.createElement)(_components.TextControl, {
    __nextHasNoMarginBottom: true,
    value: editedBlockName,
    label: (0, _i18n.__)('Block name'),
    hideLabelFromVision: true,
    placeholder: originalBlockName,
    onChange: setEditedBlockName,
    onFocus: autoSelectInputText
  }), (0, _react.createElement)(_components.__experimentalHStack, {
    justify: "right"
  }, (0, _react.createElement)(_components.Button, {
    variant: "tertiary",
    onClick: onClose
  }, (0, _i18n.__)('Cancel')), (0, _react.createElement)(_components.Button, {
    "aria-disabled": !isNameValid,
    variant: "primary",
    type: "submit"
  }, (0, _i18n.__)('Save'))))));
}
function BlockRenameControl(props) {
  const [renamingBlock, setRenamingBlock] = (0, _element.useState)(false);
  const {
    clientId,
    customName,
    onChange
  } = props;
  const blockInformation = (0, _components2.useBlockDisplayInformation)(clientId);
  return (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(_components2.InspectorControls, {
    group: "advanced"
  }, (0, _react.createElement)(_components.TextControl, {
    __nextHasNoMarginBottom: true,
    label: (0, _i18n.__)('Block name'),
    value: customName || '',
    onChange: onChange
  })), (0, _react.createElement)(_components2.BlockSettingsMenuControls, null, ({
    selectedClientIds
  }) => {
    // Only enabled for single selections.
    const canRename = selectedClientIds.length === 1 && clientId === selectedClientIds[0];

    // This check ensures the `BlockSettingsMenuControls` fill
    // doesn't render multiple times and also that it renders for
    // the block from which the menu was triggered.
    if (!canRename) {
      return null;
    }
    return (0, _react.createElement)(_components.MenuItem, {
      onClick: () => {
        setRenamingBlock(true);
      },
      "aria-expanded": renamingBlock,
      "aria-haspopup": "dialog"
    }, (0, _i18n.__)('Rename'));
  }), renamingBlock && (0, _react.createElement)(RenameModal, {
    blockName: customName || '',
    originalBlockName: blockInformation?.title,
    onClose: () => setRenamingBlock(false),
    onSave: newName => {
      // If the new value is the block's original name (e.g. `Group`)
      // or it is an empty string then assume the intent is to reset
      // the value. Therefore reset the metadata.
      if (newName === blockInformation?.title || emptyString(newName)) {
        newName = undefined;
      }
      onChange(newName);
    }
  }));
}
const withBlockRenameControl = (0, _compose.createHigherOrderComponent)(BlockEdit => props => {
  const {
    clientId,
    name,
    attributes,
    setAttributes
  } = props;
  const metaDataSupport = (0, _blocks.getBlockSupport)(name, '__experimentalMetadata', false);
  const supportsBlockNaming = !!(true === metaDataSupport || metaDataSupport?.name);
  return (0, _react.createElement)(_react.Fragment, null, supportsBlockNaming && (0, _react.createElement)(_react.Fragment, null, (0, _react.createElement)(BlockRenameControl, {
    clientId: clientId,
    customName: attributes?.metadata?.name,
    onChange: newName => {
      setAttributes({
        metadata: {
          ...(attributes?.metadata && attributes?.metadata),
          name: newName
        }
      });
    }
  })), (0, _react.createElement)(BlockEdit, {
    key: "edit",
    ...props
  }));
}, 'withToolbarControls');
exports.withBlockRenameControl = withBlockRenameControl;
(0, _hooks.addFilter)('editor.BlockEdit', 'core/block-rename-ui/with-block-rename-control', withBlockRenameControl);
//# sourceMappingURL=block-rename-ui.js.map