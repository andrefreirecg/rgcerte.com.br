{"version":3,"names":["ws","_interopRequireWildcard","require","map","error","random","encoding","decoding","_observable","logging","promise","bc","buffer","math","_mutex","Y","_simplepeerMin","_interopRequireDefault","syncProtocol","awarenessProtocol","cryptoutils","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","log","createModuleLogger","exports","messageSync","messageQueryAwareness","messageAwareness","messageBcPeerId","signalingConns","Map","rooms","checkIsSynced","room","synced","webrtcConns","forEach","peer","provider","emit","BOLD","name","UNBOLD","readMessage","buf","syncedCallback","decoder","createDecoder","encoder","createEncoder","messageType","readVarUint","undefined","awareness","doc","sendReply","writeVarUint","syncMessageType","readSyncMessage","messageYjsSyncStep2","messageYjsSyncStep1","writeVarUint8Array","encodeAwarenessUpdate","Array","from","getStates","keys","applyAwarenessUpdate","readVarUint8Array","add","readUint8","peerName","readVarString","peerId","bcConns","removed","added","push","delete","webrtcPeers","bcPeers","broadcastBcPeerId","console","readPeerMessage","peerConn","remotePeerId","GREY","UNCOLOR","sendWebrtcConn","webrtcConn","send","toUint8Array","e","broadcastWebrtcConn","m","conn","WebrtcConn","constructor","signalingConn","initiator","glareToken","closed","connected","Peer","peerOpts","on","signal","Date","now","Math","publishSignalingMessage","to","type","token","writeSyncStep1","awarenessStates","size","destroy","announceSignalingInfo","err","data","answer","broadcastBcMessage","encrypt","then","mux","publish","broadcastRoomMessage","bcconnected","topics","maxConns","filterBcConns","encoderPeerIdBc","writeUint8","writeVarString","Room","uuidv4","Set","createMutex","_bcSubscriber","decrypt","Uint8Array","reply","_docUpdateHandler","update","origin","writeUpdate","_awarenessUpdateHandler","updated","changedClients","concat","encoderAwareness","_beforeUnloadHandler","removeAwarenessStates","clientID","disconnect","window","addEventListener","process","connect","roomName","subscribe","encoderSync","encoderState","writeSyncStep2","encoderAwarenessQuery","encoderAwarenessState","unsubscribe","off","removeEventListener","openRoom","create","encryptJson","topic","toBase64","SignalingConn","WebsocketClient","url","providers","execMessage","emitPeerChange","setIfUndefined","existingConn","remoteToken","localToken","decryptJson","fromBase64","WebrtcProvider","Observable","signaling","password","Awareness","floor","rand","shouldConnect","signalingUrls","deriveKey","resolve","bind"],"sources":["@wordpress/sync/src/y-webrtc/y-webrtc.js"],"sourcesContent":["// File copied as is from the y-webrtc package with only exports\n// added to the following vars/functions: signalingConns,rooms, publishSignalingMessage, log.\n/* eslint-disable eslint-comments/disable-enable-pair */\n/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport * as ws from 'lib0/websocket';\nimport * as map from 'lib0/map';\nimport * as error from 'lib0/error';\nimport * as random from 'lib0/random';\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport { Observable } from 'lib0/observable';\nimport * as logging from 'lib0/logging';\nimport * as promise from 'lib0/promise';\nimport * as bc from 'lib0/broadcastchannel';\nimport * as buffer from 'lib0/buffer';\nimport * as math from 'lib0/math';\nimport { createMutex } from 'lib0/mutex';\n\nimport * as Y from 'yjs'; // eslint-disable-line\nimport Peer from 'simple-peer/simplepeer.min.js';\n\nimport * as syncProtocol from 'y-protocols/sync';\nimport * as awarenessProtocol from 'y-protocols/awareness';\n\nimport * as cryptoutils from './crypto.js';\n\nexport const log = logging.createModuleLogger( 'y-webrtc' );\n\nconst messageSync = 0;\nconst messageQueryAwareness = 3;\nconst messageAwareness = 1;\nconst messageBcPeerId = 4;\n\n/**\n * @type {Map<string, SignalingConn>}\n */\nexport const signalingConns = new Map();\n\n/**\n * @type {Map<string,Room>}\n */\nexport const rooms = new Map();\n\n/**\n * @param {Room} room\n */\nconst checkIsSynced = ( room ) => {\n\tlet synced = true;\n\troom.webrtcConns.forEach( ( peer ) => {\n\t\tif ( ! peer.synced ) {\n\t\t\tsynced = false;\n\t\t}\n\t} );\n\tif ( ( ! synced && room.synced ) || ( synced && ! room.synced ) ) {\n\t\troom.synced = synced;\n\t\troom.provider.emit( 'synced', [ { synced } ] );\n\t\tlog(\n\t\t\t'synced ',\n\t\t\tlogging.BOLD,\n\t\t\troom.name,\n\t\t\tlogging.UNBOLD,\n\t\t\t' with all peers'\n\t\t);\n\t}\n};\n\n/**\n * @param {Room} room\n * @param {Uint8Array} buf\n * @param {function} syncedCallback\n * @return {encoding.Encoder?}\n */\nconst readMessage = ( room, buf, syncedCallback ) => {\n\tconst decoder = decoding.createDecoder( buf );\n\tconst encoder = encoding.createEncoder();\n\tconst messageType = decoding.readVarUint( decoder );\n\tif ( room === undefined ) {\n\t\treturn null;\n\t}\n\tconst awareness = room.awareness;\n\tconst doc = room.doc;\n\tlet sendReply = false;\n\tswitch ( messageType ) {\n\t\tcase messageSync: {\n\t\t\tencoding.writeVarUint( encoder, messageSync );\n\t\t\tconst syncMessageType = syncProtocol.readSyncMessage(\n\t\t\t\tdecoder,\n\t\t\t\tencoder,\n\t\t\t\tdoc,\n\t\t\t\troom\n\t\t\t);\n\t\t\tif (\n\t\t\t\tsyncMessageType === syncProtocol.messageYjsSyncStep2 &&\n\t\t\t\t! room.synced\n\t\t\t) {\n\t\t\t\tsyncedCallback();\n\t\t\t}\n\t\t\tif ( syncMessageType === syncProtocol.messageYjsSyncStep1 ) {\n\t\t\t\tsendReply = true;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase messageQueryAwareness:\n\t\t\tencoding.writeVarUint( encoder, messageAwareness );\n\t\t\tencoding.writeVarUint8Array(\n\t\t\t\tencoder,\n\t\t\t\tawarenessProtocol.encodeAwarenessUpdate(\n\t\t\t\t\tawareness,\n\t\t\t\t\tArray.from( awareness.getStates().keys() )\n\t\t\t\t)\n\t\t\t);\n\t\t\tsendReply = true;\n\t\t\tbreak;\n\t\tcase messageAwareness:\n\t\t\tawarenessProtocol.applyAwarenessUpdate(\n\t\t\t\tawareness,\n\t\t\t\tdecoding.readVarUint8Array( decoder ),\n\t\t\t\troom\n\t\t\t);\n\t\t\tbreak;\n\t\tcase messageBcPeerId: {\n\t\t\tconst add = decoding.readUint8( decoder ) === 1;\n\t\t\tconst peerName = decoding.readVarString( decoder );\n\t\t\tif (\n\t\t\t\tpeerName !== room.peerId &&\n\t\t\t\t( ( room.bcConns.has( peerName ) && ! add ) ||\n\t\t\t\t\t( ! room.bcConns.has( peerName ) && add ) )\n\t\t\t) {\n\t\t\t\tconst removed = [];\n\t\t\t\tconst added = [];\n\t\t\t\tif ( add ) {\n\t\t\t\t\troom.bcConns.add( peerName );\n\t\t\t\t\tadded.push( peerName );\n\t\t\t\t} else {\n\t\t\t\t\troom.bcConns.delete( peerName );\n\t\t\t\t\tremoved.push( peerName );\n\t\t\t\t}\n\t\t\t\troom.provider.emit( 'peers', [\n\t\t\t\t\t{\n\t\t\t\t\t\tadded,\n\t\t\t\t\t\tremoved,\n\t\t\t\t\t\twebrtcPeers: Array.from( room.webrtcConns.keys() ),\n\t\t\t\t\t\tbcPeers: Array.from( room.bcConns ),\n\t\t\t\t\t},\n\t\t\t\t] );\n\t\t\t\tbroadcastBcPeerId( room );\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t\tconsole.error( 'Unable to compute message' );\n\t\t\treturn encoder;\n\t}\n\tif ( ! sendReply ) {\n\t\t// nothing has been written, no answer created\n\t\treturn null;\n\t}\n\treturn encoder;\n};\n\n/**\n * @param {WebrtcConn} peerConn\n * @param {Uint8Array} buf\n * @return {encoding.Encoder?}\n */\nconst readPeerMessage = ( peerConn, buf ) => {\n\tconst room = peerConn.room;\n\tlog(\n\t\t'received message from ',\n\t\tlogging.BOLD,\n\t\tpeerConn.remotePeerId,\n\t\tlogging.GREY,\n\t\t' (',\n\t\troom.name,\n\t\t')',\n\t\tlogging.UNBOLD,\n\t\tlogging.UNCOLOR\n\t);\n\treturn readMessage( room, buf, () => {\n\t\tpeerConn.synced = true;\n\t\tlog(\n\t\t\t'synced ',\n\t\t\tlogging.BOLD,\n\t\t\troom.name,\n\t\t\tlogging.UNBOLD,\n\t\t\t' with ',\n\t\t\tlogging.BOLD,\n\t\t\tpeerConn.remotePeerId\n\t\t);\n\t\tcheckIsSynced( room );\n\t} );\n};\n\n/**\n * @param {WebrtcConn} webrtcConn\n * @param {encoding.Encoder} encoder\n */\nconst sendWebrtcConn = ( webrtcConn, encoder ) => {\n\tlog(\n\t\t'send message to ',\n\t\tlogging.BOLD,\n\t\twebrtcConn.remotePeerId,\n\t\tlogging.UNBOLD,\n\t\tlogging.GREY,\n\t\t' (',\n\t\twebrtcConn.room.name,\n\t\t')',\n\t\tlogging.UNCOLOR\n\t);\n\ttry {\n\t\twebrtcConn.peer.send( encoding.toUint8Array( encoder ) );\n\t} catch ( e ) {}\n};\n\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\nconst broadcastWebrtcConn = ( room, m ) => {\n\tlog( 'broadcast message in ', logging.BOLD, room.name, logging.UNBOLD );\n\troom.webrtcConns.forEach( ( conn ) => {\n\t\ttry {\n\t\t\tconn.peer.send( m );\n\t\t} catch ( e ) {}\n\t} );\n};\n\nexport class WebrtcConn {\n\t/**\n\t * @param {SignalingConn} signalingConn\n\t * @param {boolean} initiator\n\t * @param {string} remotePeerId\n\t * @param {Room} room\n\t */\n\tconstructor( signalingConn, initiator, remotePeerId, room ) {\n\t\tlog( 'establishing connection to ', logging.BOLD, remotePeerId );\n\t\tthis.room = room;\n\t\tthis.remotePeerId = remotePeerId;\n\t\tthis.glareToken = undefined;\n\t\tthis.closed = false;\n\t\tthis.connected = false;\n\t\tthis.synced = false;\n\t\t/**\n\t\t * @type {any}\n\t\t */\n\t\tthis.peer = new Peer( { initiator, ...room.provider.peerOpts } );\n\t\tthis.peer.on( 'signal', ( signal ) => {\n\t\t\tif ( this.glareToken === undefined ) {\n\t\t\t\t// add some randomness to the timestamp of the offer\n\t\t\t\tthis.glareToken = Date.now() + Math.random();\n\t\t\t}\n\t\t\tpublishSignalingMessage( signalingConn, room, {\n\t\t\t\tto: remotePeerId,\n\t\t\t\tfrom: room.peerId,\n\t\t\t\ttype: 'signal',\n\t\t\t\ttoken: this.glareToken,\n\t\t\t\tsignal,\n\t\t\t} );\n\t\t} );\n\t\tthis.peer.on( 'connect', () => {\n\t\t\tlog( 'connected to ', logging.BOLD, remotePeerId );\n\t\t\tthis.connected = true;\n\t\t\t// send sync step 1\n\t\t\tconst provider = room.provider;\n\t\t\tconst doc = provider.doc;\n\t\t\tconst awareness = room.awareness;\n\t\t\tconst encoder = encoding.createEncoder();\n\t\t\tencoding.writeVarUint( encoder, messageSync );\n\t\t\tsyncProtocol.writeSyncStep1( encoder, doc );\n\t\t\tsendWebrtcConn( this, encoder );\n\t\t\tconst awarenessStates = awareness.getStates();\n\t\t\tif ( awarenessStates.size > 0 ) {\n\t\t\t\tconst encoder = encoding.createEncoder();\n\t\t\t\tencoding.writeVarUint( encoder, messageAwareness );\n\t\t\t\tencoding.writeVarUint8Array(\n\t\t\t\t\tencoder,\n\t\t\t\t\tawarenessProtocol.encodeAwarenessUpdate(\n\t\t\t\t\t\tawareness,\n\t\t\t\t\t\tArray.from( awarenessStates.keys() )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tsendWebrtcConn( this, encoder );\n\t\t\t}\n\t\t} );\n\t\tthis.peer.on( 'close', () => {\n\t\t\tthis.connected = false;\n\t\t\tthis.closed = true;\n\t\t\tif ( room.webrtcConns.has( this.remotePeerId ) ) {\n\t\t\t\troom.webrtcConns.delete( this.remotePeerId );\n\t\t\t\troom.provider.emit( 'peers', [\n\t\t\t\t\t{\n\t\t\t\t\t\tremoved: [ this.remotePeerId ],\n\t\t\t\t\t\tadded: [],\n\t\t\t\t\t\twebrtcPeers: Array.from( room.webrtcConns.keys() ),\n\t\t\t\t\t\tbcPeers: Array.from( room.bcConns ),\n\t\t\t\t\t},\n\t\t\t\t] );\n\t\t\t}\n\t\t\tcheckIsSynced( room );\n\t\t\tthis.peer.destroy();\n\t\t\tlog( 'closed connection to ', logging.BOLD, remotePeerId );\n\t\t\tannounceSignalingInfo( room );\n\t\t} );\n\t\tthis.peer.on( 'error', ( err ) => {\n\t\t\tlog(\n\t\t\t\t'Error in connection to ',\n\t\t\t\tlogging.BOLD,\n\t\t\t\tremotePeerId,\n\t\t\t\t': ',\n\t\t\t\terr\n\t\t\t);\n\t\t\tannounceSignalingInfo( room );\n\t\t} );\n\t\tthis.peer.on( 'data', ( data ) => {\n\t\t\tconst answer = readPeerMessage( this, data );\n\t\t\tif ( answer !== null ) {\n\t\t\t\tsendWebrtcConn( this, answer );\n\t\t\t}\n\t\t} );\n\t}\n\n\tdestroy() {\n\t\tthis.peer.destroy();\n\t}\n}\n\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\nconst broadcastBcMessage = ( room, m ) =>\n\tcryptoutils\n\t\t.encrypt( m, room.key )\n\t\t.then( ( data ) => room.mux( () => bc.publish( room.name, data ) ) );\n\n/**\n * @param {Room} room\n * @param {Uint8Array} m\n */\nconst broadcastRoomMessage = ( room, m ) => {\n\tif ( room.bcconnected ) {\n\t\tbroadcastBcMessage( room, m );\n\t}\n\tbroadcastWebrtcConn( room, m );\n};\n\n/**\n * @param {Room} room\n */\nconst announceSignalingInfo = ( room ) => {\n\tsignalingConns.forEach( ( conn ) => {\n\t\t// only subscribe if connection is established, otherwise the conn automatically subscribes to all rooms\n\t\tif ( conn.connected ) {\n\t\t\tconn.send( { type: 'subscribe', topics: [ room.name ] } );\n\t\t\tif ( room.webrtcConns.size < room.provider.maxConns ) {\n\t\t\t\tpublishSignalingMessage( conn, room, {\n\t\t\t\t\ttype: 'announce',\n\t\t\t\t\tfrom: room.peerId,\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n};\n\n/**\n * @param {Room} room\n */\nconst broadcastBcPeerId = ( room ) => {\n\tif ( room.provider.filterBcConns ) {\n\t\t// broadcast peerId via broadcastchannel\n\t\tconst encoderPeerIdBc = encoding.createEncoder();\n\t\tencoding.writeVarUint( encoderPeerIdBc, messageBcPeerId );\n\t\tencoding.writeUint8( encoderPeerIdBc, 1 );\n\t\tencoding.writeVarString( encoderPeerIdBc, room.peerId );\n\t\tbroadcastBcMessage( room, encoding.toUint8Array( encoderPeerIdBc ) );\n\t}\n};\n\nexport class Room {\n\t/**\n\t * @param {Y.Doc} doc\n\t * @param {WebrtcProvider} provider\n\t * @param {string} name\n\t * @param {CryptoKey|null} key\n\t */\n\tconstructor( doc, provider, name, key ) {\n\t\t/**\n\t\t * Do not assume that peerId is unique. This is only meant for sending signaling messages.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.peerId = random.uuidv4();\n\t\tthis.doc = doc;\n\t\t/**\n\t\t * @type {awarenessProtocol.Awareness}\n\t\t */\n\t\tthis.awareness = provider.awareness;\n\t\tthis.provider = provider;\n\t\tthis.synced = false;\n\t\tthis.name = name;\n\t\t// @todo make key secret by scoping\n\t\tthis.key = key;\n\t\t/**\n\t\t * @type {Map<string, WebrtcConn>}\n\t\t */\n\t\tthis.webrtcConns = new Map();\n\t\t/**\n\t\t * @type {Set<string>}\n\t\t */\n\t\tthis.bcConns = new Set();\n\t\tthis.mux = createMutex();\n\t\tthis.bcconnected = false;\n\t\t/**\n\t\t * @param {ArrayBuffer} data\n\t\t */\n\t\tthis._bcSubscriber = ( data ) =>\n\t\t\tcryptoutils.decrypt( new Uint8Array( data ), key ).then( ( m ) =>\n\t\t\t\tthis.mux( () => {\n\t\t\t\t\tconst reply = readMessage( this, m, () => {} );\n\t\t\t\t\tif ( reply ) {\n\t\t\t\t\t\tbroadcastBcMessage(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tencoding.toUint8Array( reply )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t);\n\t\t/**\n\t\t * Listens to Yjs updates and sends them to remote peers\n\t\t *\n\t\t * @param {Uint8Array} update\n\t\t * @param {any} origin\n\t\t */\n\t\tthis._docUpdateHandler = ( update, origin ) => {\n\t\t\tconst encoder = encoding.createEncoder();\n\t\t\tencoding.writeVarUint( encoder, messageSync );\n\t\t\tsyncProtocol.writeUpdate( encoder, update );\n\t\t\tbroadcastRoomMessage( this, encoding.toUint8Array( encoder ) );\n\t\t};\n\t\t/**\n\t\t * Listens to Awareness updates and sends them to remote peers\n\t\t *\n\t\t * @param {any} changed\n\t\t * @param {any} origin\n\t\t */\n\t\tthis._awarenessUpdateHandler = (\n\t\t\t{ added, updated, removed },\n\t\t\torigin\n\t\t) => {\n\t\t\tconst changedClients = added.concat( updated ).concat( removed );\n\t\t\tconst encoderAwareness = encoding.createEncoder();\n\t\t\tencoding.writeVarUint( encoderAwareness, messageAwareness );\n\t\t\tencoding.writeVarUint8Array(\n\t\t\t\tencoderAwareness,\n\t\t\t\tawarenessProtocol.encodeAwarenessUpdate(\n\t\t\t\t\tthis.awareness,\n\t\t\t\t\tchangedClients\n\t\t\t\t)\n\t\t\t);\n\t\t\tbroadcastRoomMessage(\n\t\t\t\tthis,\n\t\t\t\tencoding.toUint8Array( encoderAwareness )\n\t\t\t);\n\t\t};\n\n\t\tthis._beforeUnloadHandler = () => {\n\t\t\tawarenessProtocol.removeAwarenessStates(\n\t\t\t\tthis.awareness,\n\t\t\t\t[ doc.clientID ],\n\t\t\t\t'window unload'\n\t\t\t);\n\t\t\trooms.forEach( ( room ) => {\n\t\t\t\troom.disconnect();\n\t\t\t} );\n\t\t};\n\n\t\tif ( typeof window !== 'undefined' ) {\n\t\t\twindow.addEventListener(\n\t\t\t\t'beforeunload',\n\t\t\t\tthis._beforeUnloadHandler\n\t\t\t);\n\t\t} else if ( typeof process !== 'undefined' ) {\n\t\t\tprocess.on( 'exit', this._beforeUnloadHandler );\n\t\t}\n\t}\n\n\tconnect() {\n\t\tthis.doc.on( 'update', this._docUpdateHandler );\n\t\tthis.awareness.on( 'update', this._awarenessUpdateHandler );\n\t\t// signal through all available signaling connections\n\t\tannounceSignalingInfo( this );\n\t\tconst roomName = this.name;\n\t\tbc.subscribe( roomName, this._bcSubscriber );\n\t\tthis.bcconnected = true;\n\t\t// broadcast peerId via broadcastchannel\n\t\tbroadcastBcPeerId( this );\n\t\t// write sync step 1\n\t\tconst encoderSync = encoding.createEncoder();\n\t\tencoding.writeVarUint( encoderSync, messageSync );\n\t\tsyncProtocol.writeSyncStep1( encoderSync, this.doc );\n\t\tbroadcastBcMessage( this, encoding.toUint8Array( encoderSync ) );\n\t\t// broadcast local state\n\t\tconst encoderState = encoding.createEncoder();\n\t\tencoding.writeVarUint( encoderState, messageSync );\n\t\tsyncProtocol.writeSyncStep2( encoderState, this.doc );\n\t\tbroadcastBcMessage( this, encoding.toUint8Array( encoderState ) );\n\t\t// write queryAwareness\n\t\tconst encoderAwarenessQuery = encoding.createEncoder();\n\t\tencoding.writeVarUint( encoderAwarenessQuery, messageQueryAwareness );\n\t\tbroadcastBcMessage(\n\t\t\tthis,\n\t\t\tencoding.toUint8Array( encoderAwarenessQuery )\n\t\t);\n\t\t// broadcast local awareness state\n\t\tconst encoderAwarenessState = encoding.createEncoder();\n\t\tencoding.writeVarUint( encoderAwarenessState, messageAwareness );\n\t\tencoding.writeVarUint8Array(\n\t\t\tencoderAwarenessState,\n\t\t\tawarenessProtocol.encodeAwarenessUpdate( this.awareness, [\n\t\t\t\tthis.doc.clientID,\n\t\t\t] )\n\t\t);\n\t\tbroadcastBcMessage(\n\t\t\tthis,\n\t\t\tencoding.toUint8Array( encoderAwarenessState )\n\t\t);\n\t}\n\n\tdisconnect() {\n\t\t// signal through all available signaling connections\n\t\tsignalingConns.forEach( ( conn ) => {\n\t\t\tif ( conn.connected ) {\n\t\t\t\tconn.send( { type: 'unsubscribe', topics: [ this.name ] } );\n\t\t\t}\n\t\t} );\n\t\tawarenessProtocol.removeAwarenessStates(\n\t\t\tthis.awareness,\n\t\t\t[ this.doc.clientID ],\n\t\t\t'disconnect'\n\t\t);\n\t\t// broadcast peerId removal via broadcastchannel\n\t\tconst encoderPeerIdBc = encoding.createEncoder();\n\t\tencoding.writeVarUint( encoderPeerIdBc, messageBcPeerId );\n\t\tencoding.writeUint8( encoderPeerIdBc, 0 ); // remove peerId from other bc peers\n\t\tencoding.writeVarString( encoderPeerIdBc, this.peerId );\n\t\tbroadcastBcMessage( this, encoding.toUint8Array( encoderPeerIdBc ) );\n\n\t\tbc.unsubscribe( this.name, this._bcSubscriber );\n\t\tthis.bcconnected = false;\n\t\tthis.doc.off( 'update', this._docUpdateHandler );\n\t\tthis.awareness.off( 'update', this._awarenessUpdateHandler );\n\t\tthis.webrtcConns.forEach( ( conn ) => conn.destroy() );\n\t}\n\n\tdestroy() {\n\t\tthis.disconnect();\n\t\tif ( typeof window !== 'undefined' ) {\n\t\t\twindow.removeEventListener(\n\t\t\t\t'beforeunload',\n\t\t\t\tthis._beforeUnloadHandler\n\t\t\t);\n\t\t} else if ( typeof process !== 'undefined' ) {\n\t\t\tprocess.off( 'exit', this._beforeUnloadHandler );\n\t\t}\n\t}\n}\n\n/**\n * @param {Y.Doc} doc\n * @param {WebrtcProvider} provider\n * @param {string} name\n * @param {CryptoKey|null} key\n * @return {Room}\n */\nconst openRoom = ( doc, provider, name, key ) => {\n\t// there must only be one room\n\tif ( rooms.has( name ) ) {\n\t\tthrow error.create(\n\t\t\t`A Yjs Doc connected to room \"${ name }\" already exists!`\n\t\t);\n\t}\n\tconst room = new Room( doc, provider, name, key );\n\trooms.set( name, /** @type {Room} */ ( room ) );\n\treturn room;\n};\n\n/**\n * @param {SignalingConn} conn\n * @param {Room} room\n * @param {any} data\n */\nexport const publishSignalingMessage = ( conn, room, data ) => {\n\tif ( room.key ) {\n\t\tcryptoutils.encryptJson( data, room.key ).then( ( data ) => {\n\t\t\tconn.send( {\n\t\t\t\ttype: 'publish',\n\t\t\t\ttopic: room.name,\n\t\t\t\tdata: buffer.toBase64( data ),\n\t\t\t} );\n\t\t} );\n\t} else {\n\t\tconn.send( { type: 'publish', topic: room.name, data } );\n\t}\n};\n\nexport class SignalingConn extends ws.WebsocketClient {\n\tconstructor( url ) {\n\t\tsuper( url );\n\t\t/**\n\t\t * @type {Set<WebrtcProvider>}\n\t\t */\n\t\tthis.providers = new Set();\n\t\tthis.on( 'connect', () => {\n\t\t\tlog( `connected (${ url })` );\n\t\t\tconst topics = Array.from( rooms.keys() );\n\t\t\tthis.send( { type: 'subscribe', topics } );\n\t\t\trooms.forEach( ( room ) =>\n\t\t\t\tpublishSignalingMessage( this, room, {\n\t\t\t\t\ttype: 'announce',\n\t\t\t\t\tfrom: room.peerId,\n\t\t\t\t} )\n\t\t\t);\n\t\t} );\n\t\tthis.on( 'message', ( m ) => {\n\t\t\tswitch ( m.type ) {\n\t\t\t\tcase 'publish': {\n\t\t\t\t\tconst roomName = m.topic;\n\t\t\t\t\tconst room = rooms.get( roomName );\n\t\t\t\t\tif ( room == null || typeof roomName !== 'string' ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst execMessage = ( data ) => {\n\t\t\t\t\t\tconst webrtcConns = room.webrtcConns;\n\t\t\t\t\t\tconst peerId = room.peerId;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tdata == null ||\n\t\t\t\t\t\t\tdata.from === peerId ||\n\t\t\t\t\t\t\t( data.to !== undefined && data.to !== peerId ) ||\n\t\t\t\t\t\t\troom.bcConns.has( data.from )\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// ignore messages that are not addressed to this conn, or from clients that are connected via broadcastchannel\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst emitPeerChange = webrtcConns.has( data.from )\n\t\t\t\t\t\t\t? () => {}\n\t\t\t\t\t\t\t: () =>\n\t\t\t\t\t\t\t\t\troom.provider.emit( 'peers', [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tremoved: [],\n\t\t\t\t\t\t\t\t\t\t\tadded: [ data.from ],\n\t\t\t\t\t\t\t\t\t\t\twebrtcPeers: Array.from(\n\t\t\t\t\t\t\t\t\t\t\t\troom.webrtcConns.keys()\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tbcPeers: Array.from( room.bcConns ),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t] );\n\t\t\t\t\t\tswitch ( data.type ) {\n\t\t\t\t\t\t\tcase 'announce':\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\twebrtcConns.size < room.provider.maxConns\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tmap.setIfUndefined(\n\t\t\t\t\t\t\t\t\t\twebrtcConns,\n\t\t\t\t\t\t\t\t\t\tdata.from,\n\t\t\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\t\t\tnew WebrtcConn(\n\t\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\t\t\t\t\tdata.from,\n\t\t\t\t\t\t\t\t\t\t\t\troom\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\temitPeerChange();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'signal':\n\t\t\t\t\t\t\t\tif ( data.signal.type === 'offer' ) {\n\t\t\t\t\t\t\t\t\tconst existingConn = webrtcConns.get(\n\t\t\t\t\t\t\t\t\t\tdata.from\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif ( existingConn ) {\n\t\t\t\t\t\t\t\t\t\tconst remoteToken = data.token;\n\t\t\t\t\t\t\t\t\t\tconst localToken =\n\t\t\t\t\t\t\t\t\t\t\texistingConn.glareToken;\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tlocalToken &&\n\t\t\t\t\t\t\t\t\t\t\tlocalToken > remoteToken\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tlog(\n\t\t\t\t\t\t\t\t\t\t\t\t'offer rejected: ',\n\t\t\t\t\t\t\t\t\t\t\t\tdata.from\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// if we don't reject the offer, we will be accepting it and answering it\n\t\t\t\t\t\t\t\t\t\texistingConn.glareToken = undefined;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ( data.signal.type === 'answer' ) {\n\t\t\t\t\t\t\t\t\tlog( 'offer answered by: ', data.from );\n\t\t\t\t\t\t\t\t\tconst existingConn = webrtcConns.get(\n\t\t\t\t\t\t\t\t\t\tdata.from\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\texistingConn.glareToken = undefined;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ( data.to === peerId ) {\n\t\t\t\t\t\t\t\t\tmap.setIfUndefined(\n\t\t\t\t\t\t\t\t\t\twebrtcConns,\n\t\t\t\t\t\t\t\t\t\tdata.from,\n\t\t\t\t\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\t\t\t\t\tnew WebrtcConn(\n\t\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\t\t\t\t\tdata.from,\n\t\t\t\t\t\t\t\t\t\t\t\troom\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t).peer.signal( data.signal );\n\t\t\t\t\t\t\t\t\temitPeerChange();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tif ( room.key ) {\n\t\t\t\t\t\tif ( typeof m.data === 'string' ) {\n\t\t\t\t\t\t\tcryptoutils\n\t\t\t\t\t\t\t\t.decryptJson(\n\t\t\t\t\t\t\t\t\tbuffer.fromBase64( m.data ),\n\t\t\t\t\t\t\t\t\troom.key\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.then( execMessage );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\texecMessage( m.data );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\tthis.on( 'disconnect', () => log( `disconnect (${ url })` ) );\n\t}\n}\n\n/**\n * @typedef {Object} ProviderOptions\n * @property {Array<string>} [signaling]\n * @property {string} [password]\n * @property {awarenessProtocol.Awareness} [awareness]\n * @property {number} [maxConns]\n * @property {boolean} [filterBcConns]\n * @property {any} [peerOpts]\n */\n\n/**\n * @extends Observable<string>\n */\nexport class WebrtcProvider extends Observable {\n\t/**\n\t * @param {string} roomName\n\t * @param {Y.Doc} doc\n\t * @param {ProviderOptions?} opts\n\t */\n\tconstructor(\n\t\troomName,\n\t\tdoc,\n\t\t{\n\t\t\tsignaling = [ 'wss://y-webrtc-eu.fly.dev' ],\n\t\t\tpassword = null,\n\t\t\tawareness = new awarenessProtocol.Awareness( doc ),\n\t\t\tmaxConns = 20 + math.floor( random.rand() * 15 ), // the random factor reduces the chance that n clients form a cluster\n\t\t\tfilterBcConns = true,\n\t\t\tpeerOpts = {}, // simple-peer options. See https://github.com/feross/simple-peer#peer--new-peeropts\n\t\t} = {}\n\t) {\n\t\tsuper();\n\t\tthis.roomName = roomName;\n\t\tthis.doc = doc;\n\t\tthis.filterBcConns = filterBcConns;\n\t\t/**\n\t\t * @type {awarenessProtocol.Awareness}\n\t\t */\n\t\tthis.awareness = awareness;\n\t\tthis.shouldConnect = false;\n\t\tthis.signalingUrls = signaling;\n\t\tthis.signalingConns = [];\n\t\tthis.maxConns = maxConns;\n\t\tthis.peerOpts = peerOpts;\n\t\t/**\n\t\t * @type {PromiseLike<CryptoKey | null>}\n\t\t */\n\t\tthis.key = password\n\t\t\t? cryptoutils.deriveKey( password, roomName )\n\t\t\t: /** @type {PromiseLike<null>} */ ( promise.resolve( null ) );\n\t\t/**\n\t\t * @type {Room|null}\n\t\t */\n\t\tthis.room = null;\n\t\tthis.key.then( ( key ) => {\n\t\t\tthis.room = openRoom( doc, this, roomName, key );\n\t\t\tif ( this.shouldConnect ) {\n\t\t\t\tthis.room.connect();\n\t\t\t} else {\n\t\t\t\tthis.room.disconnect();\n\t\t\t}\n\t\t} );\n\t\tthis.connect();\n\t\tthis.destroy = this.destroy.bind( this );\n\t\tdoc.on( 'destroy', this.destroy );\n\t}\n\n\t/**\n\t * @type {boolean}\n\t */\n\tget connected() {\n\t\treturn this.room !== null && this.shouldConnect;\n\t}\n\n\tconnect() {\n\t\tthis.shouldConnect = true;\n\t\tthis.signalingUrls.forEach( ( url ) => {\n\t\t\tconst signalingConn = map.setIfUndefined(\n\t\t\t\tsignalingConns,\n\t\t\t\turl,\n\t\t\t\t() => new SignalingConn( url )\n\t\t\t);\n\t\t\tthis.signalingConns.push( signalingConn );\n\t\t\tsignalingConn.providers.add( this );\n\t\t} );\n\t\tif ( this.room ) {\n\t\t\tthis.room.connect();\n\t\t}\n\t}\n\n\tdisconnect() {\n\t\tthis.shouldConnect = false;\n\t\tthis.signalingConns.forEach( ( conn ) => {\n\t\t\tconn.providers.delete( this );\n\t\t\tif ( conn.providers.size === 0 ) {\n\t\t\t\tconn.destroy();\n\t\t\t\tsignalingConns.delete( conn.url );\n\t\t\t}\n\t\t} );\n\t\tif ( this.room ) {\n\t\t\tthis.room.disconnect();\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tthis.doc.off( 'destroy', this.destroy );\n\t\t// need to wait for key before deleting room\n\t\tthis.key.then( () => {\n\t\t\t/** @type {Room} */ ( this.room ).destroy();\n\t\t\trooms.delete( this.roomName );\n\t\t} );\n\t\tsuper.destroy();\n\t}\n}\n"],"mappings":"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"}