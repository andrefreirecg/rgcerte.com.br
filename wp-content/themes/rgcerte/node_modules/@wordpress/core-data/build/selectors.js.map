{"version":3,"names":["_rememo","_interopRequireDefault","require","_data","_url","_deprecated","_name","_queriedData","_entities","_utils","EMPTY_OBJECT","isRequestingEmbedPreview","createRegistrySelector","select","state","url","STORE_NAME","isResolving","exports","getAuthors","query","deprecated","since","alternative","path","addQueryArgs","getUserQueryResults","getCurrentUser","currentUser","createSelector","queryID","_state$users$queries$","queryResults","users","queries","map","id","byId","getEntitiesByKind","kind","getEntitiesConfig","entities","config","filter","entity","getEntity","name","getEntityConfig","find","getEntityRecord","key","_query$context","queriedState","records","queriedData","undefined","context","itemIsComplete","items","item","_fields","_getNormalizedCommaSe","filteredItem","fields","getNormalizedCommaSeparable","f","length","field","split","value","forEach","fieldName","setNestedValue","recordId","_query$context2","__unstableNormalizeArgs","args","newArgs","recordKey","isNumericID","Number","__experimentalGetEntityRecordNoResolver","getRawEntityRecord","record","Object","keys","reduce","accumulator","_key","isRawAttribute","_record$_key$raw","raw","_query$context3","hasEntityRecords","Array","isArray","getEntityRecords","getQueriedItems","getEntityRecordsTotalItems","getQueriedTotalItems","getEntityRecordsTotalPages","per_page","totalItems","Math","ceil","__experimentalGetDirtyEntityRecords","dirtyRecords","primaryKeys","edits","primaryKey","hasEditsForEntityRecord","entityConfig","entityRecord","getEditedEntityRecord","push","DEFAULT_ENTITY_KEY","title","getTitle","__experimentalGetEntitiesBeingSaved","recordsBeingSaved","saving","isSavingEntityRecord","getEntityRecordEdits","getEntityRecordNonTransientEdits","transientEdits","acc","_query$context4","isAutosavingEntityRecord","_state$entities$recor","pending","isAutosave","Boolean","_state$entities$recor2","isDeletingEntityRecord","_state$entities$recor3","deleting","getLastEntitySaveError","error","getLastEntityDeleteError","getUndoEdit","getRedoEdit","hasUndo","undoManager","hasRedo","getCurrentTheme","currentTheme","__experimentalGetCurrentGlobalStylesId","currentGlobalStylesId","getThemeSupports","_getCurrentTheme$them","theme_supports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","canUser","action","resource","join","userPermissions","canUserEditEntityRecord","__unstable_rest_base","getAutosaves","postType","postId","autosaves","getAutosave","authorId","autosave","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","editsReference","__experimentalGetTemplateForLink","link","__experimentalGetCurrentThemeBaseGlobalStyles","themeBaseGlobalStyles","stylesheet","__experimentalGetCurrentThemeGlobalStylesVariations","themeGlobalStyleVariations","getBlockPatterns","blockPatterns","getBlockPatternCategories","blockPatternCategories","getUserPatternCategories","userPatternCategories","getCurrentThemeGlobalStylesRevisions","themeGlobalStyleRevisions"],"sources":["@wordpress/core-data/src/selectors.ts"],"sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getQueriedItems, getQueriedTotalItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport {\n\tgetNormalizedCommaSeparable,\n\tisRawAttribute,\n\tsetNestedValue,\n\tisNumericID,\n} from './utils';\nimport type * as ET from './entity-types';\nimport type { UndoManager } from '@wordpress/undo-manager';\n\n// This is an incomplete, high-level approximation of the State type.\n// It makes the selectors slightly more safe, but is intended to evolve\n// into a more detailed representation over time.\n// See https://github.com/WordPress/gutenberg/pull/40025#discussion_r865410589 for more context.\nexport interface State {\n\tautosaves: Record< string | number, Array< unknown > >;\n\tblockPatterns: Array< unknown >;\n\tblockPatternCategories: Array< unknown >;\n\tcurrentGlobalStylesId: string;\n\tcurrentTheme: string;\n\tcurrentUser: ET.User< 'edit' >;\n\tembedPreviews: Record< string, { html: string } >;\n\tentities: EntitiesState;\n\tthemeBaseGlobalStyles: Record< string, Object >;\n\tthemeGlobalStyleVariations: Record< string, string >;\n\tthemeGlobalStyleRevisions: Record< number, Object >;\n\tundoManager: UndoManager;\n\tuserPermissions: Record< string, boolean >;\n\tusers: UserState;\n\tnavigationFallbackId: EntityRecordKey;\n\tuserPatternCategories: Array< UserPatternCategory >;\n}\n\ntype EntityRecordKey = string | number;\n\ninterface EntitiesState {\n\tconfig: EntityConfig[];\n\trecords: Record< string, Record< string, EntityState< ET.EntityRecord > > >;\n}\n\ninterface QueriedData {\n\titems: Record< ET.Context, Record< number, ET.EntityRecord > >;\n\titemIsComplete: Record< ET.Context, Record< number, boolean > >;\n\tqueries: Record< ET.Context, Record< string, Array< number > > >;\n}\n\ninterface EntityState< EntityRecord extends ET.EntityRecord > {\n\tedits: Record< string, Partial< EntityRecord > >;\n\tsaving: Record<\n\t\tstring,\n\t\tPartial< { pending: boolean; isAutosave: boolean; error: Error } >\n\t>;\n\tdeleting: Record< string, Partial< { pending: boolean; error: Error } > >;\n\tqueriedData: QueriedData;\n}\n\ninterface EntityConfig {\n\tname: string;\n\tkind: string;\n}\n\ninterface UserState {\n\tqueries: Record< string, EntityRecordKey[] >;\n\tbyId: Record< EntityRecordKey, ET.User< 'edit' > >;\n}\n\nexport interface UserPatternCategory {\n\tid: number;\n\tname: string;\n\tlabel: string;\n\tslug: string;\n\tdescription: string;\n}\n\ntype Optional< T > = T | undefined;\n\n/**\n * HTTP Query parameters sent with the API request to fetch the entity records.\n */\ntype GetRecordsHttpQuery = Record< string, any >;\n\n/**\n * Arguments for EntityRecord selectors.\n */\ntype EntityRecordArgs =\n\t| [ string, string, EntityRecordKey ]\n\t| [ string, string, EntityRecordKey, GetRecordsHttpQuery ];\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param state Data state.\n * @param url   URL the preview would be for.\n *\n * @return Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select: any ) =>\n\t\t( state: State, url: string ): boolean => {\n\t\t\treturn select( STORE_NAME ).isResolving( 'getEmbedPreview', [\n\t\t\t\turl,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @deprecated since 11.3. Callers should use `select( 'core' ).getUsers({ who: 'authors' })` instead.\n *\n * @param      state Data state.\n * @param      query Optional object of query parameters to\n *                   include with request. For valid query parameters see the [Users page](https://developer.wordpress.org/rest-api/reference/users/) in the REST API Handbook and see the arguments for [List Users](https://developer.wordpress.org/rest-api/reference/users/#list-users) and [Retrieve a User](https://developer.wordpress.org/rest-api/reference/users/#retrieve-a-user).\n * @return Authors list.\n */\nexport function getAuthors(\n\tstate: State,\n\tquery?: GetRecordsHttpQuery\n): ET.User[] {\n\tdeprecated( \"select( 'core' ).getAuthors()\", {\n\t\tsince: '5.9',\n\t\talternative: \"select( 'core' ).getUsers({ who: 'authors' })\",\n\t} );\n\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\treturn getUserQueryResults( state, path );\n}\n\n/**\n * Returns the current user.\n *\n * @param state Data state.\n *\n * @return Current user object.\n */\nexport function getCurrentUser( state: State ): ET.User< 'edit' > {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param state   Data state.\n * @param queryID Query ID.\n *\n * @return Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state: State, queryID: string ): ET.User< 'edit' >[] => {\n\t\tconst queryResults = state.users.queries[ queryID ] ?? [];\n\n\t\treturn queryResults.map( ( id ) => state.users.byId[ id ] );\n\t},\n\t( state: State, queryID: string ) => [\n\t\tstate.users.queries[ queryID ],\n\t\tstate.users.byId,\n\t]\n);\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @deprecated since WordPress 6.0. Use getEntitiesConfig instead\n * @param      state Data state.\n * @param      kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesByKind( state: State, kind: string ): Array< any > {\n\tdeprecated( \"wp.data.select( 'core' ).getEntitiesByKind()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntitiesConfig()\",\n\t} );\n\treturn getEntitiesConfig( state, kind );\n}\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @param state Data state.\n * @param kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesConfig( state: State, kind: string ): Array< any > {\n\treturn state.entities.config.filter( ( entity ) => entity.kind === kind );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @deprecated since WordPress 6.0. Use getEntityConfig instead\n * @param      state Data state.\n * @param      kind  Entity kind.\n * @param      name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntity( state: State, kind: string, name: string ): any {\n\tdeprecated( \"wp.data.select( 'core' ).getEntity()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntityConfig()\",\n\t} );\n\treturn getEntityConfig( state, kind, name );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @param state Data state.\n * @param kind  Entity kind.\n * @param name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntityConfig(\n\tstate: State,\n\tkind: string,\n\tname: string\n): any {\n\treturn state.entities.config?.find(\n\t\t( config ) => config.kind === kind && config.name === name\n\t);\n}\n\n/**\n * GetEntityRecord is declared as a *callable interface* with\n * two signatures to work around the fact that TypeScript doesn't\n * allow currying generic functions:\n *\n * ```ts\n * \t\ttype CurriedState = F extends ( state: any, ...args: infer P ) => infer R\n * \t\t\t? ( ...args: P ) => R\n * \t\t\t: F;\n * \t\ttype Selector = <K extends string | number>(\n *         state: any,\n *         kind: K,\n *         key: K extends string ? 'string value' : false\n *    ) => K;\n * \t\ttype BadlyInferredSignature = CurriedState< Selector >\n *    // BadlyInferredSignature evaluates to:\n *    // (kind: string number, key: false | \"string value\") => string number\n * ```\n *\n * The signature without the state parameter shipped as CurriedSignature\n * is used in the return value of `select( coreStore )`.\n *\n * See https://github.com/WordPress/gutenberg/pull/41578 for more details.\n */\nexport interface GetEntityRecord {\n\t<\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >,\n\t>(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t): EntityRecord | undefined;\n\n\tCurriedSignature: <\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >,\n\t>(\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t) => EntityRecord | undefined;\n\t__unstableNormalizeArgs?: ( args: EntityRecordArgs ) => EntityRecordArgs;\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param key   Record's key\n * @param query Optional query. If requesting specific\n *              fields, fields must always include the ID. For valid query parameters see the [Reference](https://developer.wordpress.org/rest-api/reference/) in the REST API Handbook and select the entity kind. Then see the arguments available \"Retrieve a [Entity kind]\".\n *\n * @return Record.\n */\nexport const getEntityRecord = createSelector(\n\t( <\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >,\n\t>(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t): EntityRecord | undefined => {\n\t\tconst queriedState =\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData;\n\t\tif ( ! queriedState ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst context = query?.context ?? 'default';\n\n\t\tif ( query === undefined ) {\n\t\t\t// If expecting a complete item, validate that completeness.\n\t\t\tif ( ! queriedState.itemIsComplete[ context ]?.[ key ] ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn queriedState.items[ context ][ key ];\n\t\t}\n\n\t\tconst item = queriedState.items[ context ]?.[ key ];\n\t\tif ( item && query._fields ) {\n\t\t\tconst filteredItem = {};\n\t\t\tconst fields = getNormalizedCommaSeparable( query._fields ) ?? [];\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tlet value = item;\n\t\t\t\tfield.forEach( ( fieldName ) => {\n\t\t\t\t\tvalue = value?.[ fieldName ];\n\t\t\t\t} );\n\t\t\t\tsetNestedValue( filteredItem, field, value );\n\t\t\t}\n\t\t\treturn filteredItem as EntityRecord;\n\t\t}\n\n\t\treturn item;\n\t} ) as GetEntityRecord,\n\t( state: State, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData?.items[\n\t\t\t\tcontext\n\t\t\t]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData\n\t\t\t\t?.itemIsComplete[ context ]?.[ recordId ],\n\t\t];\n\t}\n) as GetEntityRecord;\n\n/**\n * Normalizes `recordKey`s that look like numeric IDs to numbers.\n *\n * @param args EntityRecordArgs the selector arguments.\n * @return EntityRecordArgs the normalized arguments.\n */\ngetEntityRecord.__unstableNormalizeArgs = (\n\targs: EntityRecordArgs\n): EntityRecordArgs => {\n\tconst newArgs = [ ...args ] as EntityRecordArgs;\n\tconst recordKey = newArgs?.[ 2 ];\n\n\t// If recordKey looks to be a numeric ID then coerce to number.\n\tnewArgs[ 2 ] = isNumericID( recordKey ) ? Number( recordKey ) : recordKey;\n\n\treturn newArgs;\n};\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity records from the API if the entity record isn't available in the local state.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param key   Record's key\n *\n * @return Record.\n */\nexport function __experimentalGetEntityRecordNoResolver<\n\tEntityRecord extends ET.EntityRecord< any >,\n>( state: State, kind: string, name: string, key: EntityRecordKey ) {\n\treturn getEntityRecord< EntityRecord >( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param state State tree.\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param key   Record's key.\n *\n * @return Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t< EntityRecord extends ET.EntityRecord< any > >(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey\n\t): EntityRecord | undefined => {\n\t\tconst record = getEntityRecord< EntityRecord >(\n\t\t\tstate,\n\t\t\tkind,\n\t\t\tname,\n\t\t\tkey\n\t\t);\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\tif (\n\t\t\t\t\tisRawAttribute( getEntityConfig( state, kind, name ), _key )\n\t\t\t\t) {\n\t\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\t\taccumulator[ _key ] = record[ _key ]?.raw ?? record[ _key ];\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[ _key ] = record[ _key ];\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {} as any )\n\t\t);\n\t},\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData?.items[\n\t\t\t\tcontext\n\t\t\t]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData\n\t\t\t\t?.itemIsComplete[ context ]?.[ recordId ],\n\t\t];\n\t}\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param query Optional terms query. For valid query parameters see the [Reference](https://developer.wordpress.org/rest-api/reference/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n *\n * @return  Whether entity records have been received.\n */\nexport function hasEntityRecords(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery?: GetRecordsHttpQuery\n): boolean {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * GetEntityRecord is declared as a *callable interface* with\n * two signatures to work around the fact that TypeScript doesn't\n * allow currying generic functions.\n *\n * @see GetEntityRecord\n * @see https://github.com/WordPress/gutenberg/pull/41578\n */\nexport interface GetEntityRecords {\n\t<\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >,\n\t>(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tquery?: GetRecordsHttpQuery\n\t): EntityRecord[] | null;\n\n\tCurriedSignature: <\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >,\n\t>(\n\t\tkind: string,\n\t\tname: string,\n\t\tquery?: GetRecordsHttpQuery\n\t) => EntityRecord[] | null;\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param query Optional terms query. If requesting specific\n *              fields, fields must always include the ID. For valid query parameters see the [Reference](https://developer.wordpress.org/rest-api/reference/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n *\n * @return Records.\n */\nexport const getEntityRecords = ( <\n\tEntityRecord extends\n\t\t| ET.EntityRecord< any >\n\t\t| Partial< ET.EntityRecord< any > >,\n>(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery: GetRecordsHttpQuery\n): EntityRecord[] | null => {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData;\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedItems( queriedState, query );\n} ) as GetEntityRecords;\n\n/**\n * Returns the Entity's total available records for a given query (ignoring pagination).\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param query Optional terms query. If requesting specific\n *              fields, fields must always include the ID. For valid query parameters see the [Reference](https://developer.wordpress.org/rest-api/reference/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n *\n * @return number | null.\n */\nexport const getEntityRecordsTotalItems = (\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery: GetRecordsHttpQuery\n): number | null => {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData;\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedTotalItems( queriedState, query );\n};\n\n/**\n * Returns the number of available pages for the given query.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param query Optional terms query. If requesting specific\n *              fields, fields must always include the ID. For valid query parameters see the [Reference](https://developer.wordpress.org/rest-api/reference/) in the REST API Handbook and select the entity kind. Then see the arguments available for \"List [Entity kind]s\".\n *\n * @return number | null.\n */\nexport const getEntityRecordsTotalPages = (\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery: GetRecordsHttpQuery\n): number | null => {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData;\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\tif ( query.per_page === -1 ) return 1;\n\tconst totalItems = getQueriedTotalItems( queriedState, query );\n\tif ( ! totalItems ) return totalItems;\n\treturn Math.ceil( totalItems / query.per_page );\n};\n\ntype DirtyEntityRecord = {\n\ttitle: string;\n\tkey: EntityRecordKey;\n\tname: string;\n\tkind: string;\n};\n/**\n * Returns the list of dirty entity records.\n *\n * @param state State tree.\n *\n * @return The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst dirtyRecords: DirtyEntityRecord[] = [];\n\t\tObject.keys( records ).forEach( ( kind ) => {\n\t\t\tObject.keys( records[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = (\n\t\t\t\t\tObject.keys( records[ kind ][ name ].edits ) as string[]\n\t\t\t\t ).filter(\n\t\t\t\t\t( primaryKey ) =>\n\t\t\t\t\t\t// The entity record must exist (not be deleted),\n\t\t\t\t\t\t// and it must have edits.\n\t\t\t\t\t\tgetEntityRecord( state, kind, name, primaryKey ) &&\n\t\t\t\t\t\thasEditsForEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entityConfig = getEntityConfig( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey: entityRecord\n\t\t\t\t\t\t\t\t? entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\tentityConfig?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the list of entities currently being saved.\n *\n * @param state State tree.\n *\n * @return The list of records being saved.\n */\nexport const __experimentalGetEntitiesBeingSaved = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst recordsBeingSaved: DirtyEntityRecord[] = [];\n\t\tObject.keys( records ).forEach( ( kind ) => {\n\t\t\tObject.keys( records[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = (\n\t\t\t\t\tObject.keys( records[ kind ][ name ].saving ) as string[]\n\t\t\t\t ).filter( ( primaryKey ) =>\n\t\t\t\t\tisSavingEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entityConfig = getEntityConfig( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\trecordsBeingSaved.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey: entityRecord\n\t\t\t\t\t\t\t\t? entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\tentityConfig?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t\treturn recordsBeingSaved;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's edits.\n */\nexport function getEntityRecordEdits(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): Optional< any > {\n\treturn state.entities.records?.[ kind ]?.[ name ]?.edits?.[\n\t\trecordId as string | number\n\t];\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey\n\t): Optional< any > => {\n\t\tconst { transientEdits } = getEntityConfig( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state: State, kind: string, name: string, recordId: EntityRecordKey ) => [\n\t\tstate.entities.config,\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.edits?.[ recordId ],\n\t]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t< EntityRecord extends ET.EntityRecord< any > >(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey\n\t): ET.Updatable< EntityRecord > | undefined => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData.items[\n\t\t\t\tcontext\n\t\t\t]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData\n\t\t\t\t.itemIsComplete[ context ]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.edits?.[ recordId ],\n\t\t];\n\t}\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\tconst { pending, isAutosave } =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.saving?.[ recordId ] ?? {};\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\treturn (\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.saving?.[\n\t\t\trecordId as EntityRecordKey\n\t\t]?.pending ?? false\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\treturn (\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.deleting?.[\n\t\t\trecordId as EntityRecordKey\n\t\t]?.pending ?? false\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntitySaveError(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): any {\n\treturn state.entities.records?.[ kind ]?.[ name ]?.saving?.[ recordId ]\n\t\t?.error;\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntityDeleteError(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): any {\n\treturn state.entities.records?.[ kind ]?.[ name ]?.deleting?.[ recordId ]\n\t\t?.error;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @deprecated since 6.3\n *\n * @param      state State tree.\n *\n * @return The edit.\n */\nexport function getUndoEdit( state: State ): Optional< any > {\n\tdeprecated( \"select( 'core' ).getUndoEdit()\", {\n\t\tsince: '6.3',\n\t} );\n\treturn undefined;\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @deprecated since 6.3\n *\n * @param      state State tree.\n *\n * @return The edit.\n */\nexport function getRedoEdit( state: State ): Optional< any > {\n\tdeprecated( \"select( 'core' ).getRedoEdit()\", {\n\t\tsince: '6.3',\n\t} );\n\treturn undefined;\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param state State tree.\n *\n * @return Whether there is a previous edit or not.\n */\nexport function hasUndo( state: State ): boolean {\n\treturn state.undoManager.hasUndo();\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param state State tree.\n *\n * @return Whether there is a next edit or not.\n */\nexport function hasRedo( state: State ): boolean {\n\treturn state.undoManager.hasRedo();\n}\n\n/**\n * Return the current theme.\n *\n * @param state Data state.\n *\n * @return The current theme.\n */\nexport function getCurrentTheme( state: State ): any {\n\tif ( ! state.currentTheme ) {\n\t\treturn null;\n\t}\n\treturn getEntityRecord( state, 'root', 'theme', state.currentTheme );\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentGlobalStylesId( state: State ): string {\n\treturn state.currentGlobalStylesId;\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param state Data state.\n *\n * @return Index data.\n */\nexport function getThemeSupports( state: State ): any {\n\treturn getCurrentTheme( state )?.theme_supports ?? EMPTY_OBJECT;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param state Data state.\n * @param url   Embedded URL.\n *\n * @return Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state: State, url: string ): any {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param state Data state.\n * @param url   Embedded URL.\n *\n * @return Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state: State, url: string ): boolean {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param state    Data state.\n * @param action   Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param resource REST resource to check, e.g. 'media' or 'posts'.\n * @param id       Optional ID of the rest resource to check.\n *\n * @return Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser(\n\tstate: State,\n\taction: string,\n\tresource: string,\n\tid?: EntityRecordKey\n): boolean | undefined {\n\tconst key = [ action, resource, id ].filter( Boolean ).join( '/' );\n\treturn state.userPermissions[ key ];\n}\n\n/**\n * Returns whether the current user can edit the given entity.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param state    Data state.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record's id.\n * @return Whether or not the user can edit,\n * or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUserEditEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean | undefined {\n\tconst entityConfig = getEntityConfig( state, kind, name );\n\tif ( ! entityConfig ) {\n\t\treturn false;\n\t}\n\tconst resource = entityConfig.__unstable_rest_base;\n\n\treturn canUser( state, 'update', resource, recordId );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param state    State tree.\n * @param postType The type of the parent post.\n * @param postId   The id of the parent post.\n *\n * @return An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves(\n\tstate: State,\n\tpostType: string,\n\tpostId: EntityRecordKey\n): Array< any > | undefined {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param state    State tree.\n * @param postType The type of the parent post.\n * @param postId   The id of the parent post.\n * @param authorId The id of the author.\n *\n * @return The autosave for the post and author.\n */\nexport function getAutosave< EntityRecord extends ET.EntityRecord< any > >(\n\tstate: State,\n\tpostType: string,\n\tpostId: EntityRecordKey,\n\tauthorId: EntityRecordKey\n): EntityRecord | undefined {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\n\treturn autosaves?.find(\n\t\t( autosave: any ) => autosave.author === authorId\n\t) as EntityRecord | undefined;\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param state    State tree.\n * @param postType The type of the parent post.\n * @param postId   The id of the parent post.\n *\n * @return True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) =>\n\t\t(\n\t\t\tstate: State,\n\t\t\tpostType: string,\n\t\t\tpostId: EntityRecordKey\n\t\t): boolean => {\n\t\t\treturn select( STORE_NAME ).hasFinishedResolution( 'getAutosaves', [\n\t\t\t\tpostType,\n\t\t\t\tpostId,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param state Editor state.\n *\n * @return A value whose reference will change only when an edit occurs.\n */\nexport function getReferenceByDistinctEdits( state ) {\n\treturn state.editsReference;\n}\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param state Editor state.\n * @param link  Link.\n *\n * @return The template record.\n */\nexport function __experimentalGetTemplateForLink(\n\tstate: State,\n\tlink: string\n): Optional< ET.Updatable< ET.WpTemplate > > | null {\n\tconst records = getEntityRecords< ET.WpTemplate >(\n\t\tstate,\n\t\t'postType',\n\t\t'wp_template',\n\t\t{\n\t\t\t'find-template': link,\n\t\t}\n\t);\n\n\tif ( records?.length ) {\n\t\treturn getEditedEntityRecord< ET.WpTemplate >(\n\t\t\tstate,\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\trecords[ 0 ].id\n\t\t);\n\t}\n\treturn null;\n}\n\n/**\n * Retrieve the current theme's base global styles\n *\n * @param state Editor state.\n *\n * @return The Global Styles object.\n */\nexport function __experimentalGetCurrentThemeBaseGlobalStyles(\n\tstate: State\n): any {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeBaseGlobalStyles[ currentTheme.stylesheet ];\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentThemeGlobalStylesVariations(\n\tstate: State\n): string | null {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeGlobalStyleVariations[ currentTheme.stylesheet ];\n}\n\n/**\n * Retrieve the list of registered block patterns.\n *\n * @param state Data state.\n *\n * @return Block pattern list.\n */\nexport function getBlockPatterns( state: State ): Array< any > {\n\treturn state.blockPatterns;\n}\n\n/**\n * Retrieve the list of registered block pattern categories.\n *\n * @param state Data state.\n *\n * @return Block pattern category list.\n */\nexport function getBlockPatternCategories( state: State ): Array< any > {\n\treturn state.blockPatternCategories;\n}\n\n/**\n * Retrieve the registered user pattern categories.\n *\n * @param state Data state.\n *\n * @return User patterns category array.\n */\n\nexport function getUserPatternCategories(\n\tstate: State\n): Array< UserPatternCategory > {\n\treturn state.userPatternCategories;\n}\n\n/**\n * Returns the revisions of the current global styles theme.\n *\n * @param state Data state.\n *\n * @return The current global styles.\n */\nexport function getCurrentThemeGlobalStylesRevisions(\n\tstate: State\n): Array< object > | null {\n\tconst currentGlobalStylesId =\n\t\t__experimentalGetCurrentGlobalStylesId( state );\n\n\tif ( ! currentGlobalStylesId ) {\n\t\treturn null;\n\t}\n\n\treturn state.themeGlobalStyleRevisions[ currentGlobalStylesId ];\n}\n"],"mappings":"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"}