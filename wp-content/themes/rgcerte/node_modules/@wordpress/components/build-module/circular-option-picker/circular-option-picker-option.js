import { createElement } from "react";
/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */
import { useInstanceId } from '@wordpress/compose';
import { forwardRef, useContext, useEffect } from '@wordpress/element';
import { Icon, check } from '@wordpress/icons';

/**
 * Internal dependencies
 */
import { CircularOptionPickerContext } from './circular-option-picker-context';
import Button from '../button';
import { CompositeItem } from '../composite';
import Tooltip from '../tooltip';
const hasSelectedOption = new Map();
function UnforwardedOptionAsButton(props, forwardedRef) {
  const {
    isPressed,
    ...additionalProps
  } = props;
  return createElement(Button, {
    ...additionalProps,
    "aria-pressed": isPressed,
    ref: forwardedRef
  });
}
const OptionAsButton = forwardRef(UnforwardedOptionAsButton);
function UnforwardedOptionAsOption(props, forwardedRef) {
  const {
    id,
    isSelected,
    context,
    ...additionalProps
  } = props;
  const {
    isComposite,
    ..._compositeState
  } = context;
  const compositeState = _compositeState;
  const {
    baseId,
    currentId,
    setCurrentId
  } = compositeState;
  useEffect(() => {
    // If we call `setCurrentId` here, it doesn't update for other
    // Option renders in the same pass. So we have to store our own
    // map to make sure that we only set the first selected option.
    // We still need to check `currentId` because the control will
    // update this as the user moves around, and that state should
    // be maintained as the group gains and loses focus.
    if (isSelected && !currentId && !hasSelectedOption.get(baseId)) {
      hasSelectedOption.set(baseId, true);
      setCurrentId(id);
    }
  }, [baseId, currentId, id, isSelected, setCurrentId]);
  return createElement(CompositeItem, {
    ...additionalProps,
    ...compositeState,
    as: Button,
    id: id,
    role: "option",
    "aria-selected": !!isSelected,
    ref: forwardedRef
  });
}
const OptionAsOption = forwardRef(UnforwardedOptionAsOption);
export function Option({
  className,
  isSelected,
  selectedIconProps = {},
  tooltipText,
  ...additionalProps
}) {
  const compositeContext = useContext(CircularOptionPickerContext);
  const {
    isComposite,
    baseId
  } = compositeContext;
  const id = useInstanceId(Option, baseId || 'components-circular-option-picker__option');
  const commonProps = {
    id,
    className: 'components-circular-option-picker__option',
    ...additionalProps
  };
  const optionControl = isComposite ? createElement(OptionAsOption, {
    ...commonProps,
    context: compositeContext,
    isSelected: isSelected
  }) : createElement(OptionAsButton, {
    ...commonProps,
    isPressed: isSelected
  });
  return createElement("div", {
    className: classnames(className, 'components-circular-option-picker__option-wrapper')
  }, tooltipText ? createElement(Tooltip, {
    text: tooltipText
  }, optionControl) : optionControl, isSelected && createElement(Icon, {
    icon: check,
    ...selectedIconProps
  }));
}
//# sourceMappingURL=circular-option-picker-option.js.map