{"version":3,"file":"react-perfect-slider.js","sources":["../src/Slider.tsx","../src/useInterval.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport useInterval from './useInterval';\n\ninterface SliderProps {\n  children: React.ReactNodeArray;\n  transitionDuration?: number;\n  transitionFunction?: string;\n  autoplay?: boolean;\n  autoplayDuration?: number;\n  renderControls?: (\n    next: () => void,\n    previous: () => void,\n    goTo: (slide: number) => void,\n    slide: number,\n    total: number,\n  ) => React.ReactNode | React.ReactNodeArray;\n}\n\nconst Slider: React.FC<SliderProps> = ({\n  children,\n  autoplay = true,\n  transitionDuration = 1000,\n  transitionFunction = 'ease',\n  autoplayDuration = 5000,\n  renderControls = (): void => { /* placeholder */ },\n}) => {\n  // current slide\n  const [current, setCurrent] = useState(0);\n\n  // slide we want transit to (could be [-1; length])\n  const [wanted, setWanted] = useState(0);\n\n  // slide we actually want to show (real slide number: [0, length-1])\n  const [realWanted, setRealWanted] = useState(0);\n\n  const { length } = children;\n\n  const goTo = (slide: number): void => {\n    if (wanted === current) {\n      if (slide === length) setRealWanted(0);\n      else if (slide === -1) setRealWanted(length - 1);\n      else setRealWanted(slide);\n\n      setWanted(slide);\n    }\n  };\n\n  const next = (): void => goTo((current + 1) % (length + 1));\n  const previous = (): void => goTo((current - 1) % length);\n\n  useInterval(() => {\n    next();\n  }, autoplay ? autoplayDuration : null);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setCurrent(realWanted);\n      setWanted(realWanted);\n    }, transitionDuration);\n\n    return (): void => clearTimeout(timeout);\n  }, [transitionDuration, realWanted]);\n\n  return (\n    <div style={{\n      position: 'relative',\n      width: '100%',\n      overflow: 'hidden',\n    }}\n    >\n      <div style={{\n        display: 'flex',\n        width: `${(length + 2) * 100}%`,\n        transitionProperty: 'transform',\n        willChange: 'transform',\n        transitionTimingFunction: transitionFunction,\n        transitionDuration: wanted !== current ? `${transitionDuration}ms` : '0ms',\n        transform: `translateX(-${((wanted + 1) / (length + 2)) * 100}%)`,\n        WebkitTransform: `translateX(-${((wanted + 1) / (length + 2)) * 100}%)`,\n      }}\n      >\n        <div style={{ width: '100%' }}>\n          {children[length - 1]}\n        </div>\n        {children.map((slide, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <div style={{ width: '100%' }} key={index}>\n            {slide}\n          </div>\n        ))}\n        <div style={{ width: '100%' }}>\n          {children[0]}\n        </div>\n      </div>\n\n      {renderControls(next, previous, goTo, realWanted, length)}\n    </div>\n  );\n};\n\nexport default Slider;\n","import { useEffect, useRef } from 'react';\n\nconst useInterval = (callback: () => void, delay: number | null): void => {\n  const savedCallback = useRef<typeof callback>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = (): void => savedCallback && savedCallback.current && savedCallback.current();\n\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return (): void => clearInterval(id);\n    }\n\n    return (): void => { /* placeholder */ };\n  }, [delay]);\n};\n\nexport default useInterval;\n"],"names":["callback","delay","savedCallback","children","autoplay","transitionDuration","transitionFunction","autoplayDuration","renderControls","useState","current","setCurrent","wanted","setWanted","realWanted","setRealWanted","length","goTo","slide","next","useRef","useEffect","id","setInterval","clearInterval","timeout","setTimeout","clearTimeout","React","style","position","width","overflow","display","transitionProperty","willChange","transitionTimingFunction","transform","WebkitTransform","map","index","key"],"mappings":"yHAmBsC,gBCjBjBA,EAAsBC,EACnCC,EDiBNC,IAAAA,aACAC,SAAAA,oBACAC,mBAAAA,aAAqB,UACrBC,mBAAAA,aAAqB,aACrBC,iBAAAA,aAAmB,UACnBC,eAAAA,aAAiB,iBAGaC,WAAS,GAAhCC,OAASC,SAGYF,WAAS,GAA9BG,OAAQC,SAGqBJ,WAAS,GAAtCK,OAAYC,OAEXC,EAAWb,EAAXa,OAEFC,EAAO,SAACC,GACRN,IAAWF,IACSK,EAAlBG,IAAUF,EAAsB,GAChB,IAAXE,EAA4BF,EAAS,EAC3BE,GAEnBL,EAAUK,KAIRC,EAAO,kBAAYF,GAAMP,EAAU,IAAMM,EAAS,KAgBxD,OC9DmBhB,EDiDP,WACVmB,KClDuClB,EDmDtCG,EAAWG,EAAmB,KClD3BL,EAAgBkB,WAGtBC,YAAU,WACRnB,EAAcQ,QAAUV,GACvB,CAACA,IAGJqB,YAAU,WAGR,GAAc,OAAVpB,EAAgB,CAClB,IAAMqB,EAAKC,YAHA,kBAAYrB,GAAiBA,EAAcQ,SAAWR,EAAcQ,WAGlDT,GAC7B,yBAAmBuB,cAAcF,IAGnC,qBACC,CAACrB,IDmCJoB,YAAU,WACR,IAAMI,EAAUC,WAAW,WACzBf,EAAWG,GACXD,EAAUC,IACTT,GAEH,yBAAmBsB,aAAaF,KAC/B,CAACpB,EAAoBS,IAGtBc,+BAAKC,MAAO,CACVC,SAAU,WACVC,MAAO,OACPC,SAAU,WAGVJ,+BAAKC,MAAO,CACVI,QAAS,OACTF,MAAyB,KAAdf,EAAS,OACpBkB,mBAAoB,YACpBC,WAAY,YACZC,yBAA0B9B,EAC1BD,mBAAoBO,IAAWF,EAAaL,OAAyB,MACrEgC,0BAA4BzB,EAAS,IAAMI,EAAS,GAAM,SAC1DsB,gCAAkC1B,EAAS,IAAMI,EAAS,GAAM,WAGhEY,+BAAKC,MAAO,CAAEE,MAAO,SAClB5B,EAASa,EAAS,IAEpBb,EAASoC,IAAI,SAACrB,EAAOsB,UAEpBZ,+BAAKC,MAAO,CAAEE,MAAO,QAAUU,IAAKD,GACjCtB,KAGLU,+BAAKC,MAAO,CAAEE,MAAO,SAClB5B,EAAS,KAIbK,EAAeW,EA/CH,kBAAYF,GAAMP,EAAU,GAAKM,IA+CdC,EAAMH,EAAYE"}