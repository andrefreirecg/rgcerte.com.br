{"version":3,"file":"react-perfect-slider.modern.js","sources":["../src/Slider.tsx","../src/useInterval.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport useInterval from './useInterval';\n\ninterface SliderProps {\n  children: React.ReactNodeArray;\n  transitionDuration?: number;\n  transitionFunction?: string;\n  autoplay?: boolean;\n  autoplayDuration?: number;\n  renderControls?: (\n    next: () => void,\n    previous: () => void,\n    goTo: (slide: number) => void,\n    slide: number,\n    total: number,\n  ) => React.ReactNode | React.ReactNodeArray;\n}\n\nconst Slider: React.FC<SliderProps> = ({\n  children,\n  autoplay = true,\n  transitionDuration = 1000,\n  transitionFunction = 'ease',\n  autoplayDuration = 5000,\n  renderControls = (): void => { /* placeholder */ },\n}) => {\n  // current slide\n  const [current, setCurrent] = useState(0);\n\n  // slide we want transit to (could be [-1; length])\n  const [wanted, setWanted] = useState(0);\n\n  // slide we actually want to show (real slide number: [0, length-1])\n  const [realWanted, setRealWanted] = useState(0);\n\n  const { length } = children;\n\n  const goTo = (slide: number): void => {\n    if (wanted === current) {\n      if (slide === length) setRealWanted(0);\n      else if (slide === -1) setRealWanted(length - 1);\n      else setRealWanted(slide);\n\n      setWanted(slide);\n    }\n  };\n\n  const next = (): void => goTo((current + 1) % (length + 1));\n  const previous = (): void => goTo((current - 1) % length);\n\n  useInterval(() => {\n    next();\n  }, autoplay ? autoplayDuration : null);\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setCurrent(realWanted);\n      setWanted(realWanted);\n    }, transitionDuration);\n\n    return (): void => clearTimeout(timeout);\n  }, [transitionDuration, realWanted]);\n\n  return (\n    <div style={{\n      position: 'relative',\n      width: '100%',\n      overflow: 'hidden',\n    }}\n    >\n      <div style={{\n        display: 'flex',\n        width: `${(length + 2) * 100}%`,\n        transitionProperty: 'transform',\n        willChange: 'transform',\n        transitionTimingFunction: transitionFunction,\n        transitionDuration: wanted !== current ? `${transitionDuration}ms` : '0ms',\n        transform: `translateX(-${((wanted + 1) / (length + 2)) * 100}%)`,\n        WebkitTransform: `translateX(-${((wanted + 1) / (length + 2)) * 100}%)`,\n      }}\n      >\n        <div style={{ width: '100%' }}>\n          {children[length - 1]}\n        </div>\n        {children.map((slide, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <div style={{ width: '100%' }} key={index}>\n            {slide}\n          </div>\n        ))}\n        <div style={{ width: '100%' }}>\n          {children[0]}\n        </div>\n      </div>\n\n      {renderControls(next, previous, goTo, realWanted, length)}\n    </div>\n  );\n};\n\nexport default Slider;\n","import { useEffect, useRef } from 'react';\n\nconst useInterval = (callback: () => void, delay: number | null): void => {\n  const savedCallback = useRef<typeof callback>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = (): void => savedCallback && savedCallback.current && savedCallback.current();\n\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return (): void => clearInterval(id);\n    }\n\n    return (): void => { /* placeholder */ };\n  }, [delay]);\n};\n\nexport default useInterval;\n"],"names":["children","autoplay","transitionDuration","transitionFunction","autoplayDuration","renderControls","current","setCurrent","useState","wanted","setWanted","realWanted","setRealWanted","length","goTo","slide","next","callback","delay","savedCallback","useRef","useEffect","id","setInterval","clearInterval","useInterval","timeout","setTimeout","clearTimeout","React","style","position","width","overflow","display","transitionProperty","willChange","transitionTimingFunction","transform","WebkitTransform","map","index","key"],"mappings":"6EAmBsC,EACpCA,SAAAA,EACAC,SAAAA,GAAW,EACXC,mBAAAA,EAAqB,IACrBC,mBAAAA,EAAqB,OACrBC,iBAAAA,EAAmB,IACnBC,eAAAA,EAAiB,aAGjB,MAAOC,EAASC,GAAcC,EAAS,IAGhCC,EAAQC,GAAaF,EAAS,IAG9BG,EAAYC,GAAiBJ,EAAS,IAEvCK,OAAEA,GAAWb,EAEbc,EAAQC,IACRN,IAAWH,IACSM,EAAlBG,IAAUF,EAAsB,GAChB,IAAXE,EAA4BF,EAAS,EAC3BE,GAEnBL,EAAUK,KAIRC,EAAO,IAAYF,GAAMR,EAAU,IAAMO,EAAS,IAgBxD,MC9DkB,EAACI,EAAsBC,KACzC,MAAMC,EAAgBC,IAGtBC,EAAU,KACRF,EAAcb,QAAUW,GACvB,CAACA,IAGJI,EAAU,KAGR,GAAc,OAAVH,EAAgB,CAClB,MAAMI,EAAKC,YAHA,IAAYJ,GAAiBA,EAAcb,SAAWa,EAAcb,UAGlDY,GAC7B,MAAO,IAAYM,cAAcF,GAGnC,MAAO,QACN,CAACJ,KD+BJO,CAAY,KACVT,KACCf,EAAWG,EAAmB,MAEjCiB,EAAU,KACR,MAAMK,EAAUC,WAAW,KACzBpB,EAAWI,GACXD,EAAUC,IACTT,GAEH,MAAO,IAAY0B,aAAaF,IAC/B,CAACxB,EAAoBS,IAGtBkB,uBAAKC,MAAO,CACVC,SAAU,WACVC,MAAO,OACPC,SAAU,WAGVJ,uBAAKC,MAAO,CACVI,QAAS,OACTF,MAAyB,KAAdnB,EAAS,OACpBsB,mBAAoB,YACpBC,WAAY,YACZC,yBAA0BlC,EAC1BD,mBAAoBO,IAAWH,KAAaJ,MAAyB,MACrEoC,0BAA4B7B,EAAS,IAAMI,EAAS,GAAM,QAC1D0B,gCAAkC9B,EAAS,IAAMI,EAAS,GAAM,UAGhEgB,uBAAKC,MAAO,CAAEE,MAAO,SAClBhC,EAASa,EAAS,IAEpBb,EAASwC,IAAI,CAACzB,EAAO0B,IAEpBZ,uBAAKC,MAAO,CAAEE,MAAO,QAAUU,IAAKD,GACjC1B,IAGLc,uBAAKC,MAAO,CAAEE,MAAO,SAClBhC,EAAS,KAIbK,EAAeW,EA/CH,IAAYF,GAAMR,EAAU,GAAKO,GA+CdC,EAAMH,EAAYE"}